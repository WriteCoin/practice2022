[
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "ClientRecvType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "ClientSendType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "Peername",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "ClientRecvType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "ClientSendType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "RecvType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "SendType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "ClientRecvType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "ClientSendType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "RecvType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "SendType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "RecvType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "SendType",
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "getargs",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "FullArgSpec",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "ArgsType",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "JsonRpcModel",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ParamType",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ProcRequest",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "RequestResult",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ResponseError",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ResponseResult",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "FuncSchema",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "FuncType",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInternalError",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInvalidParamsError",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInvalidRequestError",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultMethodNotFoundError",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ParamType",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultParseError",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ProcRequest",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ResponseError",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ResponseResult",
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "isExtraImport": true,
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ParseError",
        "importPath": "lib2to3.pgen2.parse",
        "description": "lib2to3.pgen2.parse",
        "isExtraImport": true,
        "detail": "lib2to3.pgen2.parse",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ClientJsonRPC",
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "isExtraImport": true,
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "notification",
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "isExtraImport": true,
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "client_sr",
        "importPath": "json_rpc.socket_base.socket_fabric",
        "description": "json_rpc.socket_base.socket_fabric",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.socket_fabric",
        "documentation": {}
    },
    {
        "label": "server_sr",
        "importPath": "json_rpc.socket_base.socket_fabric",
        "description": "json_rpc.socket_base.socket_fabric",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.socket_fabric",
        "documentation": {}
    },
    {
        "label": "client_sr",
        "importPath": "json_rpc.socket_base.socket_fabric",
        "description": "json_rpc.socket_base.socket_fabric",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.socket_fabric",
        "documentation": {}
    },
    {
        "label": "server_sr",
        "importPath": "json_rpc.socket_base.socket_fabric",
        "description": "json_rpc.socket_base.socket_fabric",
        "isExtraImport": true,
        "detail": "json_rpc.socket_base.socket_fabric",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "CodeType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ServerJsonRPC",
        "importPath": "json_rpc.server",
        "description": "json_rpc.server",
        "isExtraImport": true,
        "detail": "json_rpc.server",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 5,
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "peekOfCode": "Token = str\nSendType = Union[\n    Callable[[bytes, Token], Awaitable[None]], Callable[[bytes], Awaitable[None]]\n]\nRecvType = Callable[[], Awaitable[Tuple[Token, bytes]]]\nClientSendType = Callable[[bytes], Awaitable[None]]\nClientRecvType = Callable[[], Awaitable[bytes]]\nPeername = Tuple[str, int]",
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "SendType",
        "kind": 5,
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "peekOfCode": "SendType = Union[\n    Callable[[bytes, Token], Awaitable[None]], Callable[[bytes], Awaitable[None]]\n]\nRecvType = Callable[[], Awaitable[Tuple[Token, bytes]]]\nClientSendType = Callable[[bytes], Awaitable[None]]\nClientRecvType = Callable[[], Awaitable[bytes]]\nPeername = Tuple[str, int]",
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "RecvType",
        "kind": 5,
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "peekOfCode": "RecvType = Callable[[], Awaitable[Tuple[Token, bytes]]]\nClientSendType = Callable[[bytes], Awaitable[None]]\nClientRecvType = Callable[[], Awaitable[bytes]]\nPeername = Tuple[str, int]",
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "ClientSendType",
        "kind": 5,
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "peekOfCode": "ClientSendType = Callable[[bytes], Awaitable[None]]\nClientRecvType = Callable[[], Awaitable[bytes]]\nPeername = Tuple[str, int]",
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "ClientRecvType",
        "kind": 5,
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "peekOfCode": "ClientRecvType = Callable[[], Awaitable[bytes]]\nPeername = Tuple[str, int]",
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "Peername",
        "kind": 5,
        "importPath": "json_rpc.socket_base.send_recv",
        "description": "json_rpc.socket_base.send_recv",
        "peekOfCode": "Peername = Tuple[str, int]",
        "detail": "json_rpc.socket_base.send_recv",
        "documentation": {}
    },
    {
        "label": "get_data_to_read",
        "kind": 2,
        "importPath": "json_rpc.socket_base.socket_fabric",
        "description": "json_rpc.socket_base.socket_fabric",
        "peekOfCode": "def get_data_to_read(line: bytes) -> bytes:\n    return line[: len(line) - 1]\ndef get_data_to_send(message: bytes) -> bytes:\n    return message + b\"\\n\\n\"\ndef is_data_empty(data: bytes) -> bool:\n    return data == b\"\\n\" or data == b\"\" or len(data) == 0\ndef new_token() -> Token:\n    alphabet = string.ascii_letters + string.digits\n    return \"\".join(secrets.choice(alphabet) for i in range(20))\nasync def read(reader: asyncio.StreamReader, token: Optional[Token] = None):",
        "detail": "json_rpc.socket_base.socket_fabric",
        "documentation": {}
    },
    {
        "label": "get_data_to_send",
        "kind": 2,
        "importPath": "json_rpc.socket_base.socket_fabric",
        "description": "json_rpc.socket_base.socket_fabric",
        "peekOfCode": "def get_data_to_send(message: bytes) -> bytes:\n    return message + b\"\\n\\n\"\ndef is_data_empty(data: bytes) -> bool:\n    return data == b\"\\n\" or data == b\"\" or len(data) == 0\ndef new_token() -> Token:\n    alphabet = string.ascii_letters + string.digits\n    return \"\".join(secrets.choice(alphabet) for i in range(20))\nasync def read(reader: asyncio.StreamReader, token: Optional[Token] = None):\n    async for line in reader:\n        if not is_data_empty(line):",
        "detail": "json_rpc.socket_base.socket_fabric",
        "documentation": {}
    },
    {
        "label": "is_data_empty",
        "kind": 2,
        "importPath": "json_rpc.socket_base.socket_fabric",
        "description": "json_rpc.socket_base.socket_fabric",
        "peekOfCode": "def is_data_empty(data: bytes) -> bool:\n    return data == b\"\\n\" or data == b\"\" or len(data) == 0\ndef new_token() -> Token:\n    alphabet = string.ascii_letters + string.digits\n    return \"\".join(secrets.choice(alphabet) for i in range(20))\nasync def read(reader: asyncio.StreamReader, token: Optional[Token] = None):\n    async for line in reader:\n        if not is_data_empty(line):\n            await read_queue.put((token, get_data_to_read(line)))\nasync def server_recv() -> Tuple[Token, bytes]:",
        "detail": "json_rpc.socket_base.socket_fabric",
        "documentation": {}
    },
    {
        "label": "new_token",
        "kind": 2,
        "importPath": "json_rpc.socket_base.socket_fabric",
        "description": "json_rpc.socket_base.socket_fabric",
        "peekOfCode": "def new_token() -> Token:\n    alphabet = string.ascii_letters + string.digits\n    return \"\".join(secrets.choice(alphabet) for i in range(20))\nasync def read(reader: asyncio.StreamReader, token: Optional[Token] = None):\n    async for line in reader:\n        if not is_data_empty(line):\n            await read_queue.put((token, get_data_to_read(line)))\nasync def server_recv() -> Tuple[Token, bytes]:\n    return await read_queue.get()\nasync def client_recv() -> bytes:",
        "detail": "json_rpc.socket_base.socket_fabric",
        "documentation": {}
    },
    {
        "label": "ClientJsonRPC",
        "kind": 6,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "class ClientJsonRPC():\n    default_version = \"2.0\"\n    default_encondig = \"UTF-8\"\n    default_request = ProcRequest(\n        jsonrpc=default_version, id=None, method=\"\", params=[]\n    )\n    notify_command = \"notify\"\n    def __init__(\n        self,\n        send: ClientSendType,",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "CallNotifyDecorator",
        "kind": 6,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "class CallNotifyDecorator():\n    def __init__(self, client: ClientJsonRPC, func: FuncType):\n        self.client = client\n        self.func = func\n    async def __func(self, name: str, *args, **kwargs):\n        return await self.func(name, get_args(*args, **kwargs))\n    def __getitem__(self, name: str):\n        return partial(self.__func, name)\n    def __getattr__(self, name: str):\n        return self[name]",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "BatchDecorator",
        "kind": 6,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "class BatchDecorator():\n    def __init__(self, client: ClientJsonRPC, func: BatchFunc, args: List[BatchArg] = [], call_available: bool = True, no_notify: bool = True):\n        self.client = client\n        self.func = func\n        self.args = args\n        self.call_available = call_available\n        self.no_notify = no_notify\n        if no_notify:\n            self.notify = self.__class__(\n                self.client, self.func, self.args, False, False)",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "notification",
        "kind": 2,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "def notification(\n    func_name: str,\n    params: Union[ParamType, Any]\n) -> BatchArg:\n    return (func_name, params, False)\ndef get_args(*args, **kwargs):\n    return [*args] if len(args) else {**kwargs}\nclass ClientJsonRPC():\n    default_version = \"2.0\"\n    default_encondig = \"UTF-8\"",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "get_args",
        "kind": 2,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "def get_args(*args, **kwargs):\n    return [*args] if len(args) else {**kwargs}\nclass ClientJsonRPC():\n    default_version = \"2.0\"\n    default_encondig = \"UTF-8\"\n    default_request = ProcRequest(\n        jsonrpc=default_version, id=None, method=\"\", params=[]\n    )\n    notify_command = \"notify\"\n    def __init__(",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "BatchArg",
        "kind": 5,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "BatchArg = Union[Tuple[str, Union[ParamType, Any]],\n                 Tuple[str, Union[ParamType, Any], bool]]\nBatchArgs = Tuple[BatchArg, ...]\ndef notification(\n    func_name: str,\n    params: Union[ParamType, Any]\n) -> BatchArg:\n    return (func_name, params, False)\ndef get_args(*args, **kwargs):\n    return [*args] if len(args) else {**kwargs}",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "BatchArgs",
        "kind": 5,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "BatchArgs = Tuple[BatchArg, ...]\ndef notification(\n    func_name: str,\n    params: Union[ParamType, Any]\n) -> BatchArg:\n    return (func_name, params, False)\ndef get_args(*args, **kwargs):\n    return [*args] if len(args) else {**kwargs}\nclass ClientJsonRPC():\n    default_version = \"2.0\"",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "FuncType",
        "kind": 5,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "FuncType = Callable[[str, ArgsType], Awaitable[Any]]\nBatchFunc = Callable[[BatchArg], Awaitable[List[Any]]]\nclass CallNotifyDecorator():\n    def __init__(self, client: ClientJsonRPC, func: FuncType):\n        self.client = client\n        self.func = func\n    async def __func(self, name: str, *args, **kwargs):\n        return await self.func(name, get_args(*args, **kwargs))\n    def __getitem__(self, name: str):\n        return partial(self.__func, name)",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "BatchFunc",
        "kind": 5,
        "importPath": "json_rpc.client",
        "description": "json_rpc.client",
        "peekOfCode": "BatchFunc = Callable[[BatchArg], Awaitable[List[Any]]]\nclass CallNotifyDecorator():\n    def __init__(self, client: ClientJsonRPC, func: FuncType):\n        self.client = client\n        self.func = func\n    async def __func(self, name: str, *args, **kwargs):\n        return await self.func(name, get_args(*args, **kwargs))\n    def __getitem__(self, name: str):\n        return partial(self.__func, name)\n    def __getattr__(self, name: str):",
        "detail": "json_rpc.client",
        "documentation": {}
    },
    {
        "label": "BatchParam",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class BatchParam(TypedDict):\n    func_name: str\n    args: Union[ParamType, Any]\nclass JsonRpcModel(BaseModel):\n    json_rpc: str = Field(alias=\"jsonrpc\")\n    id: Optional[int]\nclass ProcRequest(JsonRpcModel):\n    method: str\n    params: ParamType\nclass RequestResult(TypedDict):",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "JsonRpcModel",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class JsonRpcModel(BaseModel):\n    json_rpc: str = Field(alias=\"jsonrpc\")\n    id: Optional[int]\nclass ProcRequest(JsonRpcModel):\n    method: str\n    params: ParamType\nclass RequestResult(TypedDict):\n    request: ProcRequest\n    request_id: Optional[int]\nclass BatchRequest(BaseModel):",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ProcRequest",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class ProcRequest(JsonRpcModel):\n    method: str\n    params: ParamType\nclass RequestResult(TypedDict):\n    request: ProcRequest\n    request_id: Optional[int]\nclass BatchRequest(BaseModel):\n    params: List[ProcRequest]\nclass ErrorData(TypedDict):\n    loc: Optional[list]",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "RequestResult",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class RequestResult(TypedDict):\n    request: ProcRequest\n    request_id: Optional[int]\nclass BatchRequest(BaseModel):\n    params: List[ProcRequest]\nclass ErrorData(TypedDict):\n    loc: Optional[list]\n    msg: Optional[str]\n    type: str\n    ctx: Optional[dict]",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "BatchRequest",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class BatchRequest(BaseModel):\n    params: List[ProcRequest]\nclass ErrorData(TypedDict):\n    loc: Optional[list]\n    msg: Optional[str]\n    type: str\n    ctx: Optional[dict]\nclass Error(TypedDict):\n    code: int\n    message: str",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ErrorData",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class ErrorData(TypedDict):\n    loc: Optional[list]\n    msg: Optional[str]\n    type: str\n    ctx: Optional[dict]\nclass Error(TypedDict):\n    code: int\n    message: str\n    data: Optional[ErrorData]\nINVALID_REQUEST_ERROR_CODE = -32600",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class Error(TypedDict):\n    code: int\n    message: str\n    data: Optional[ErrorData]\nINVALID_REQUEST_ERROR_CODE = -32600\nINVALID_REQUEST_ERROR_MESSAGE = \"Invalid request\"\nINVALID_REQUEST_ERROR_TYPE = \"invalid_request\"\nMETHOD_NOT_FOUND_ERROR_CODE = -32601\nMETHOD_NOT_FOUND_ERROR_MESSAGE = \"Method not found\"\nMETHOD_NOT_FOUND_ERROR_TYPE = \"method_not_found\"",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ResponseError",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class ResponseError(JsonRpcModel):\n    error: Error\nclass ResponseResult(JsonRpcModel):\n    result: Any\nclass InvalidRequestException(Exception):\n    def __str__(self) -> str:\n        return DefaultInvalidRequestError[\"message\"]\nclass MethodNotFoundException(Exception):\n    def __str__(self) -> str:\n        return DefaultMethodNotFoundError[\"message\"]",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ResponseResult",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class ResponseResult(JsonRpcModel):\n    result: Any\nclass InvalidRequestException(Exception):\n    def __str__(self) -> str:\n        return DefaultInvalidRequestError[\"message\"]\nclass MethodNotFoundException(Exception):\n    def __str__(self) -> str:\n        return DefaultMethodNotFoundError[\"message\"]\nclass InternalErrorException(Exception):\n    def __str__(self) -> str:",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "InvalidRequestException",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class InvalidRequestException(Exception):\n    def __str__(self) -> str:\n        return DefaultInvalidRequestError[\"message\"]\nclass MethodNotFoundException(Exception):\n    def __str__(self) -> str:\n        return DefaultMethodNotFoundError[\"message\"]\nclass InternalErrorException(Exception):\n    def __str__(self) -> str:\n        return DefaultInternalError[\"message\"]\nclass FuncSchema(BaseModel):",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "MethodNotFoundException",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class MethodNotFoundException(Exception):\n    def __str__(self) -> str:\n        return DefaultMethodNotFoundError[\"message\"]\nclass InternalErrorException(Exception):\n    def __str__(self) -> str:\n        return DefaultInternalError[\"message\"]\nclass FuncSchema(BaseModel):\n    func_name: str = Field(alias=\"funcName\")\n    parameters: dict\nclass JsonRpcSchema(BaseModel):",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "InternalErrorException",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class InternalErrorException(Exception):\n    def __str__(self) -> str:\n        return DefaultInternalError[\"message\"]\nclass FuncSchema(BaseModel):\n    func_name: str = Field(alias=\"funcName\")\n    parameters: dict\nclass JsonRpcSchema(BaseModel):\n    title: str = \"JSON-RPC 2.0\"\nexceptions = {\n    INVALID_REQUEST_ERROR_TYPE: InvalidRequestException,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "FuncSchema",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class FuncSchema(BaseModel):\n    func_name: str = Field(alias=\"funcName\")\n    parameters: dict\nclass JsonRpcSchema(BaseModel):\n    title: str = \"JSON-RPC 2.0\"\nexceptions = {\n    INVALID_REQUEST_ERROR_TYPE: InvalidRequestException,\n    METHOD_NOT_FOUND_ERROR_TYPE: MethodNotFoundException,\n    INVALID_PARAMS_ERROR_TYPE: TypeError,\n    INTERNAL_ERROR_TYPE: InternalErrorException,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "JsonRpcSchema",
        "kind": 6,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "class JsonRpcSchema(BaseModel):\n    title: str = \"JSON-RPC 2.0\"\nexceptions = {\n    INVALID_REQUEST_ERROR_TYPE: InvalidRequestException,\n    METHOD_NOT_FOUND_ERROR_TYPE: MethodNotFoundException,\n    INVALID_PARAMS_ERROR_TYPE: TypeError,\n    INTERNAL_ERROR_TYPE: InternalErrorException,\n    PARSE_ERROR_TYPE: ParseError\n}",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "get_invalid_request_error",
        "kind": 2,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "def get_invalid_request_error(data: ErrorData):\n    return Error(\n        code=INVALID_REQUEST_ERROR_CODE,\n        message=INVALID_REQUEST_ERROR_MESSAGE,\n        data=data\n    )\ndef get_method_not_found_error(data: ErrorData):\n    return Error(\n        code=METHOD_NOT_FOUND_ERROR_CODE,\n        message=METHOD_NOT_FOUND_ERROR_MESSAGE,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "get_method_not_found_error",
        "kind": 2,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "def get_method_not_found_error(data: ErrorData):\n    return Error(\n        code=METHOD_NOT_FOUND_ERROR_CODE,\n        message=METHOD_NOT_FOUND_ERROR_MESSAGE,\n        data=data\n    )\ndef get_invalid_params_error(data: ErrorData):\n    return Error(\n        code=INVALID_PARAMS_ERROR_CODE,\n        message=INVALID_PARAMS_ERROR_MESSAGE,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "get_invalid_params_error",
        "kind": 2,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "def get_invalid_params_error(data: ErrorData):\n    return Error(\n        code=INVALID_PARAMS_ERROR_CODE,\n        message=INVALID_PARAMS_ERROR_MESSAGE,\n        data=data\n    )\ndef get_internal_error(data: ErrorData):\n    return Error(\n        code=INTERNAL_ERROR_CODE,\n        message=INTERNAL_ERROR_MESSAGE,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "get_internal_error",
        "kind": 2,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "def get_internal_error(data: ErrorData):\n    return Error(\n        code=INTERNAL_ERROR_CODE,\n        message=INTERNAL_ERROR_MESSAGE,\n        data=data\n    )\ndef get_parse_error(data: ErrorData):\n    return Error(\n        code=PARSE_ERROR_CODE,\n        message=PARSE_ERROR_MESSAGE,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "get_parse_error",
        "kind": 2,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "def get_parse_error(data: ErrorData):\n    return Error(\n        code=PARSE_ERROR_CODE,\n        message=PARSE_ERROR_MESSAGE,\n        data=data\n    )\nDefaultInvalidRequestErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=INVALID_REQUEST_ERROR_TYPE,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "FuncType",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "FuncType = Union[Callable[(...), Awaitable[None]], Callable]\nParamType = Union[List[Any], Dict[str, Any]]\nArgsType = Union[ParamType, Any]\nclass BatchParam(TypedDict):\n    func_name: str\n    args: Union[ParamType, Any]\nclass JsonRpcModel(BaseModel):\n    json_rpc: str = Field(alias=\"jsonrpc\")\n    id: Optional[int]\nclass ProcRequest(JsonRpcModel):",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ParamType",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "ParamType = Union[List[Any], Dict[str, Any]]\nArgsType = Union[ParamType, Any]\nclass BatchParam(TypedDict):\n    func_name: str\n    args: Union[ParamType, Any]\nclass JsonRpcModel(BaseModel):\n    json_rpc: str = Field(alias=\"jsonrpc\")\n    id: Optional[int]\nclass ProcRequest(JsonRpcModel):\n    method: str",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ArgsType",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "ArgsType = Union[ParamType, Any]\nclass BatchParam(TypedDict):\n    func_name: str\n    args: Union[ParamType, Any]\nclass JsonRpcModel(BaseModel):\n    json_rpc: str = Field(alias=\"jsonrpc\")\n    id: Optional[int]\nclass ProcRequest(JsonRpcModel):\n    method: str\n    params: ParamType",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INVALID_REQUEST_ERROR_CODE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INVALID_REQUEST_ERROR_CODE = -32600\nINVALID_REQUEST_ERROR_MESSAGE = \"Invalid request\"\nINVALID_REQUEST_ERROR_TYPE = \"invalid_request\"\nMETHOD_NOT_FOUND_ERROR_CODE = -32601\nMETHOD_NOT_FOUND_ERROR_MESSAGE = \"Method not found\"\nMETHOD_NOT_FOUND_ERROR_TYPE = \"method_not_found\"\nINVALID_PARAMS_ERROR_CODE = -32602\nINVALID_PARAMS_ERROR_MESSAGE = \"Invalid params\"\nINVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INVALID_REQUEST_ERROR_MESSAGE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INVALID_REQUEST_ERROR_MESSAGE = \"Invalid request\"\nINVALID_REQUEST_ERROR_TYPE = \"invalid_request\"\nMETHOD_NOT_FOUND_ERROR_CODE = -32601\nMETHOD_NOT_FOUND_ERROR_MESSAGE = \"Method not found\"\nMETHOD_NOT_FOUND_ERROR_TYPE = \"method_not_found\"\nINVALID_PARAMS_ERROR_CODE = -32602\nINVALID_PARAMS_ERROR_MESSAGE = \"Invalid params\"\nINVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INVALID_REQUEST_ERROR_TYPE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INVALID_REQUEST_ERROR_TYPE = \"invalid_request\"\nMETHOD_NOT_FOUND_ERROR_CODE = -32601\nMETHOD_NOT_FOUND_ERROR_MESSAGE = \"Method not found\"\nMETHOD_NOT_FOUND_ERROR_TYPE = \"method_not_found\"\nINVALID_PARAMS_ERROR_CODE = -32602\nINVALID_PARAMS_ERROR_MESSAGE = \"Invalid params\"\nINVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "METHOD_NOT_FOUND_ERROR_CODE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "METHOD_NOT_FOUND_ERROR_CODE = -32601\nMETHOD_NOT_FOUND_ERROR_MESSAGE = \"Method not found\"\nMETHOD_NOT_FOUND_ERROR_TYPE = \"method_not_found\"\nINVALID_PARAMS_ERROR_CODE = -32602\nINVALID_PARAMS_ERROR_MESSAGE = \"Invalid params\"\nINVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "METHOD_NOT_FOUND_ERROR_MESSAGE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "METHOD_NOT_FOUND_ERROR_MESSAGE = \"Method not found\"\nMETHOD_NOT_FOUND_ERROR_TYPE = \"method_not_found\"\nINVALID_PARAMS_ERROR_CODE = -32602\nINVALID_PARAMS_ERROR_MESSAGE = \"Invalid params\"\nINVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "METHOD_NOT_FOUND_ERROR_TYPE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "METHOD_NOT_FOUND_ERROR_TYPE = \"method_not_found\"\nINVALID_PARAMS_ERROR_CODE = -32602\nINVALID_PARAMS_ERROR_MESSAGE = \"Invalid params\"\nINVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INVALID_PARAMS_ERROR_CODE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INVALID_PARAMS_ERROR_CODE = -32602\nINVALID_PARAMS_ERROR_MESSAGE = \"Invalid params\"\nINVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INVALID_PARAMS_ERROR_MESSAGE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INVALID_PARAMS_ERROR_MESSAGE = \"Invalid params\"\nINVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):\n    return Error(",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INVALID_PARAMS_ERROR_TYPE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INVALID_PARAMS_ERROR_TYPE = \"type_error\"\nINTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):\n    return Error(\n        code=INVALID_REQUEST_ERROR_CODE,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INTERNAL_ERROR_CODE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INTERNAL_ERROR_CODE = -32603\nINTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):\n    return Error(\n        code=INVALID_REQUEST_ERROR_CODE,\n        message=INVALID_REQUEST_ERROR_MESSAGE,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INTERNAL_ERROR_MESSAGE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INTERNAL_ERROR_MESSAGE = \"Internal error\"\nINTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):\n    return Error(\n        code=INVALID_REQUEST_ERROR_CODE,\n        message=INVALID_REQUEST_ERROR_MESSAGE,\n        data=data",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "INTERNAL_ERROR_TYPE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "INTERNAL_ERROR_TYPE = \"internal_error\"\nPARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):\n    return Error(\n        code=INVALID_REQUEST_ERROR_CODE,\n        message=INVALID_REQUEST_ERROR_MESSAGE,\n        data=data\n    )",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "PARSE_ERROR_CODE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "PARSE_ERROR_CODE = -32700\nPARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):\n    return Error(\n        code=INVALID_REQUEST_ERROR_CODE,\n        message=INVALID_REQUEST_ERROR_MESSAGE,\n        data=data\n    )\ndef get_method_not_found_error(data: ErrorData):",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "PARSE_ERROR_MESSAGE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "PARSE_ERROR_MESSAGE = \"Parse error\"\nPARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):\n    return Error(\n        code=INVALID_REQUEST_ERROR_CODE,\n        message=INVALID_REQUEST_ERROR_MESSAGE,\n        data=data\n    )\ndef get_method_not_found_error(data: ErrorData):\n    return Error(",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "PARSE_ERROR_TYPE",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "PARSE_ERROR_TYPE = \"parse_error\"\ndef get_invalid_request_error(data: ErrorData):\n    return Error(\n        code=INVALID_REQUEST_ERROR_CODE,\n        message=INVALID_REQUEST_ERROR_MESSAGE,\n        data=data\n    )\ndef get_method_not_found_error(data: ErrorData):\n    return Error(\n        code=METHOD_NOT_FOUND_ERROR_CODE,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInvalidRequestErrorData",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultInvalidRequestErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=INVALID_REQUEST_ERROR_TYPE,\n    ctx=None\n)\nDefaultInvalidRequestError = get_invalid_request_error(\n    DefaultInvalidRequestErrorData)\nDefaultMethodNotFoundErrorData = ErrorData(\n    loc=None,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInvalidRequestError",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultInvalidRequestError = get_invalid_request_error(\n    DefaultInvalidRequestErrorData)\nDefaultMethodNotFoundErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=METHOD_NOT_FOUND_ERROR_TYPE,\n    ctx=None\n)\nDefaultMethodNotFoundError = get_method_not_found_error(\n    DefaultMethodNotFoundErrorData)",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultMethodNotFoundErrorData",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultMethodNotFoundErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=METHOD_NOT_FOUND_ERROR_TYPE,\n    ctx=None\n)\nDefaultMethodNotFoundError = get_method_not_found_error(\n    DefaultMethodNotFoundErrorData)\nDefaultInvalidParamsErrorData = ErrorData(\n    loc=None,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultMethodNotFoundError",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultMethodNotFoundError = get_method_not_found_error(\n    DefaultMethodNotFoundErrorData)\nDefaultInvalidParamsErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=INVALID_PARAMS_ERROR_TYPE,\n    ctx=None\n)\nDefaultInvalidParamsError = get_invalid_params_error(\n    DefaultInvalidParamsErrorData)",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInvalidParamsErrorData",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultInvalidParamsErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=INVALID_PARAMS_ERROR_TYPE,\n    ctx=None\n)\nDefaultInvalidParamsError = get_invalid_params_error(\n    DefaultInvalidParamsErrorData)\nDefaultInternalErrorData = ErrorData(\n    loc=None,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInvalidParamsError",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultInvalidParamsError = get_invalid_params_error(\n    DefaultInvalidParamsErrorData)\nDefaultInternalErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=INTERNAL_ERROR_TYPE,\n    ctx=None\n)\nDefaultInternalError = get_internal_error(DefaultInternalErrorData)\nDefaultParseErrorData = ErrorData(",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInternalErrorData",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultInternalErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=INTERNAL_ERROR_TYPE,\n    ctx=None\n)\nDefaultInternalError = get_internal_error(DefaultInternalErrorData)\nDefaultParseErrorData = ErrorData(\n    loc=None,\n    msg=None,",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultInternalError",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultInternalError = get_internal_error(DefaultInternalErrorData)\nDefaultParseErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=PARSE_ERROR_TYPE,\n    ctx=None\n)\nDefaultParseError = get_parse_error(DefaultParseErrorData)\nclass ResponseError(JsonRpcModel):\n    error: Error",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultParseErrorData",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultParseErrorData = ErrorData(\n    loc=None,\n    msg=None,\n    type=PARSE_ERROR_TYPE,\n    ctx=None\n)\nDefaultParseError = get_parse_error(DefaultParseErrorData)\nclass ResponseError(JsonRpcModel):\n    error: Error\nclass ResponseResult(JsonRpcModel):",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "DefaultParseError",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "DefaultParseError = get_parse_error(DefaultParseErrorData)\nclass ResponseError(JsonRpcModel):\n    error: Error\nclass ResponseResult(JsonRpcModel):\n    result: Any\nclass InvalidRequestException(Exception):\n    def __str__(self) -> str:\n        return DefaultInvalidRequestError[\"message\"]\nclass MethodNotFoundException(Exception):\n    def __str__(self) -> str:",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "kind": 5,
        "importPath": "json_rpc.model",
        "description": "json_rpc.model",
        "peekOfCode": "exceptions = {\n    INVALID_REQUEST_ERROR_TYPE: InvalidRequestException,\n    METHOD_NOT_FOUND_ERROR_TYPE: MethodNotFoundException,\n    INVALID_PARAMS_ERROR_TYPE: TypeError,\n    INTERNAL_ERROR_TYPE: InternalErrorException,\n    PARSE_ERROR_TYPE: ParseError\n}",
        "detail": "json_rpc.model",
        "documentation": {}
    },
    {
        "label": "ServerJsonRPC",
        "kind": 6,
        "importPath": "json_rpc.server",
        "description": "json_rpc.server",
        "peekOfCode": "class ServerJsonRPC():\n    default_version = \"2.0\"\n    default_encondig = \"UTF-8\"\n    default_request = ProcRequest(\n        jsonrpc=default_version, id=None, method=\"\", params=[]\n    )\n    notify_command = \"notify\"\n    def __init__(\n        self,\n        send: SendType,",
        "detail": "json_rpc.server",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "client",
        "description": "client",
        "peekOfCode": "def main():\n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "client",
        "documentation": {}
    },
    {
        "label": "_Cella",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class _Cella:\n    __hash__: ClassVar[None]  # type: ignore[assignment]\n    cell_contents: Any\n# Doesn't exist at runtime, but deleting this breaks mypy. See #2999\n@final\nclass Fu:\n    # Make sure this class definition stays roughly in line with `types.FunctionType`\n    @property\n    def __closure__(self) -> tuple[_Cella, ...] | None: ...\n    __code__: CodeType",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Fu",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Fu:\n    # Make sure this class definition stays roughly in line with `types.FunctionType`\n    @property\n    def __closure__(self) -> tuple[_Cella, ...] | None: ...\n    __code__: CodeType\n    __defaults__: tuple[Any, ...] | None\n    __dict__: dict[str, Any]\n    @property\n    def __globals__(self) -> dict[str, Any]: ...\n    __name__: str",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def main():\n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "socket_client",
        "description": "socket_client",
        "peekOfCode": "def main():\n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "socket_client",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "socket_server",
        "description": "socket_server",
        "peekOfCode": "def main():\n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "socket_server",
        "documentation": {}
    }
]